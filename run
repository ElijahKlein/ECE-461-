#!/bin/bash
#  Name: Elijah Klein
#  Date of Last Edit: 2/11/2023
#
#  Purpose: Run file for the package managing CLI project
#
#  Details: Takes an input that is either 'build', 'install', 'test' or URL_FILE that illicits the following behavior
#	build - compiles all necessary code in the system
#	install - installs all necessary dependencies 
#	test - runs test suite to verify functionality of system and overall code coverage 
#	URL_FILE - runs net score and metric calculations for all GitHub or npm repositories listed in the URL_FILE


#installFunc - installs all required dependencies
installFunc () {
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Running install function" >> $LOG_FILE
	fi
	
	local installedCount=0 #Count of installed dependencies 
	local dummyVar=''      #Dummy variable to prevent unnecessary output from being printed to stdout
	
	#This installs GitPython to access the GraphQL API
	#https://gitpython.readthedocs.io/en/stable/intro.html#installing-gitpython
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Installing GitPython" >> $LOG_FILE
		pip install GitPython >> $LOG_FILE
		installedCount=$((installedCount+1))
	else
		pip install GitPython >> /dev/null 
		installedCount=$((installedCount+1))
	fi	
	
	#Installs the PyGitHub library to access the GitHub Rest API
	#https://github.com/PyGithub/PyGithub
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Installing pyGitHub" >> $LOG_FILE
		pip install PyGithub >> $LOG_FILE	
		installedCount=$((installedCount+1))
	else
		pip install PyGithub >> /dev/null 
		installedCount=$((installedCount+1))
	fi

	#Installs the Coverage.py library to measure code coverage
	#https://coverage.readthedocs.io/en/7.1.0/
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Installing coverage.py" >> $LOG_FILE
		pip install coverage >> $LOG_FILE	
		installedCount=$((installedCount+1))
	else
		pip install coverage >> /dev/null 
		installedCount=$((installedCount+1))
	fi

	#Installs the pytest library for testing purposes 
	#https://docs.pytest.org/en/7.2.x/getting-started.html#get-started
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Installing pytest" >> $LOG_FILE
		pip install -U pytest >> $LOG_FILE
		installedCount=$((installedCount+1))
	else
		pip install -U pytest >> /dev/null 
		installedCount=$((installedCount+1))
	fi
	
	echo "$installedCount dependencies installed..." 

	if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
		echo "$installedCount dependencies installed..." >> $LOG_FILE
	fi
	
	return 0
}


#buildFunc - compiles all relevant code 
buildFunc () {
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Running build function" >> $LOG_FILE
	fi

	#Compiling structure of all relevant files including error checking and logging
	rustc -A dead_code NetScoreCalculation/net_score.rs  
	[ -s net_score.exe ] 
	if [[ $? -ne 0 ]]; then
		echo "Failed Build: net_score.rs"
		if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
			echo "Failed Build: net_score.rs" >> $LOG_FILE
		fi
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Successful build: net_score.rs" >> $LOG_FILE
	fi
	
	rustc -A dead_code NetScoreCalculation/MetricCalculation/bus_factor.rs
	[ -s bus_factor.exe ] 
	if [[ $? -ne 0 ]]; then
		echo "Failed Build: bus_factor.rs"
		if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
			echo "Failed Build: bus_factor.rs" >> $LOG_FILE
		fi
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Successful build: bus_factor.rs" >> $LOG_FILE
	fi
	
	rustc -A dead_code NetScoreCalculation/MetricCalculation/Correctness.rs
	[ -s correctness.exe ] 
	if [[ $? -ne 0 ]]; then
		echo "Failed Build: Correctness.rs"
		if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
			echo "Failed Build: Correctness.rs" >> $LOG_FILE
		fi
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Successful build: Correctness.rs" >> $LOG_FILE
	fi
	
	rustc -A warnings -A dead_code NetScoreCalculation/MetricCalculation/ramp_up.rs
	[ -s ramp_up.exe ] 
	if [[ $? -ne 0 ]]; then
		echo "Failed Build: ramp_up.rs"
		if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
			echo "Failed Build: ramp_up.rs" >> $LOG_FILE
		fi
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Successful build: ramp_up.rs" >> $LOG_FILE
	fi
	
	rustc -A dead_code NetScoreCalculation/MetricCalculation/Responsiveness.rs
	[ -s Responsiveness.exe ] 
	if [[ $? -ne 0 ]]; then
		echo "Failed Build: Responsiveness.rs"
		if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
			echo "Failed Build: Responsiveness.rs" >> $LOG_FILE
		fi
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Successful build: Responsiveness.rs" >> $LOG_FILE
	fi
	

	if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
		echo "All builds completed successful" >> $LOG_FILE
	fi

	return 0
}

#testFunc - runs testing suite for all modules
testFunc () {
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Running test function suite" >> $LOG_FILE
	fi

	#local status=''
	#status=$(./ErrorTest)
	
	status=0
	status= python3 ErrorTest.py
	

	if [[ $status -ne 0 ]]; then
		if [[ $LOG_LEVEL -eq 2 ]]; then
			echo "Testing suite failed" >> $LOG_FILE
		fi
		return 1
	else	
		if [[ $LOG_LEVEL -eq 2 ]]; then
			echo "Testing suite successful" >> $LOG_FILE
		fi
	fi
	
	return 0
}

#netScoreFunc - runs main program to compute net score and all sub scores
netScoreFunc () {
	if [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Running net score function" >> $LOG_FILE
	fi
	
	status=0
	URL_FILE=$1
	
	if [[ -f "$URL_FILE" ]]; then
		status= python3 main.py $URL_FILE
	else 
		echo "Error: $URL_FILE does not exist" 
		return 1
	fi	
	
	if [[ "$status" -ne 0 && $LOG_LEVEL -eq 2 ]]; then
		echo "Net Score Calculation Failed" >> $LOG_FILE
		return 1
	elif [[ $LOG_LEVEL -eq 2 ]]; then
		echo "Net Score Calculation successful" >> $LOG_FILE
	fi

	return 0
}


if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
	now=$(date)
	echo "Beginning of Log: $now" >> $LOG_FILE
fi


status=0
if [[ "$1" == "install" ]]; then
	output=$(installFunc)
	echo $output
	status=$?

elif [[ "$1" == "build" ]]; then
	output=$(buildFunc)
	#echo "$output"
	status=$?

elif [[ "$1" == "test" ]]; then
	output=$(testFunc)
	echo $output
	status=$?
elif [[ -f "$1" ]]; then
	netScoreFunc $1
	#echo $output
	status=$?
else
	status = 1
	echo "Error, input is invalid"
fi


if [[ $LOG_LEVEL -eq 2 || $LOG_LEVEL -eq 1 ]]; then
	echo "End of Log" >> $LOG_FILE
	echo "" >> $LOG_FILE
fi

#Return statement for success or failure
if [[ "$status" -eq "0" ]]; then
	exit 0
else
	exit 1
fi
